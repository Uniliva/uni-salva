"use strict";(self.webpackChunkuni_docs=self.webpackChunkuni_docs||[]).push([[282],{28453:(t,n,a)=>{a.d(n,{R:()=>r,x:()=>i});var e=a(96540);const o={},s=e.createContext(o);function r(t){const n=e.useContext(s);return e.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function i(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:r(t.components),e.createElement(s.Provider,{value:n},t.children)}},97618:(t,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>e,toc:()=>u});const e=JSON.parse('{"id":"developer-notes/linguagens-de-programacao/java/Streams","title":"Streams","description":"- Metodos uteis - min / max","source":"@site/docs/developer-notes/04-linguagens-de-programacao/01-java/04-Streams.md","sourceDirName":"developer-notes/04-linguagens-de-programacao/01-java","slug":"/developer-notes/linguagens-de-programacao/java/Streams","permalink":"/uni-salva/docs/developer-notes/linguagens-de-programacao/java/Streams","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/developer-notes/04-linguagens-de-programacao/01-java/04-Streams.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Streams"},"sidebar":"developerNotesSidebar","previous":{"title":"Interfaces Funcionais","permalink":"/uni-salva/docs/developer-notes/linguagens-de-programacao/java/interfaces_funcionais"},"next":{"title":"Compilador local","permalink":"/uni-salva/docs/developer-notes/linguagens-de-programacao/protocolos-de-comunicacao/grpc/compilador"}}');var o=a(74848),s=a(28453);const r={title:"Streams"},i=void 0,l={},u=[];function c(t){const n={code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("script",{src:"https://gist.github.com/Uniliva/c44f6ac7856e24a4cea75c419ca06482.js"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Metodos uteis - min / max"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'package streams;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class MinMax {\n\tpublic static void main(String[] args) {\n\t\tAluno a1 = new Aluno("Ana", 7.1);\n\t\tAluno a2 = new Aluno("Luna", 6.1);\n\t\tAluno a3 = new Aluno("Gui", 8.1);\n\t\tAluno a4 = new Aluno("Gabi", 10);\n\t\t\n\t\tList<Aluno> alunos = Arrays.asList(a1, a2, a3, a4);\n\t\t\n\t\tComparator<Aluno> melhorNota = (aluno1, aluno2) -> {\n\t\t\tif(aluno1.nota > aluno2.nota) return 1;\n\t\t\tif(aluno1.nota < aluno2.nota) return -1;\n\t\t\treturn 0;\n\t\t};\n\n\t\tComparator<Aluno> piorNota = (aluno1, aluno2) -> {\n\t\t\tif(aluno1.nota > aluno2.nota) return -1;\n\t\t\tif(aluno1.nota < aluno2.nota) return 1;\n\t\t\treturn 0;\n\t\t};\n\t\t\n\t\tSystem.out.println(alunos.stream().max(melhorNota).get());\n\t\tSystem.out.println(alunos.stream().min(piorNota).get());\n\t\t\n\t\tSystem.out.println(alunos.stream().min(melhorNota).get());\n\t\tSystem.out.println(alunos.stream().max(piorNota).get());\n\t}\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Metodos uteis - limit / skip / distinct / takeWhile"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'package streams;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Outros {\n\n\tpublic static void main(String[] args) {\n\t\tAluno a1 = new Aluno("Ana", 7.1);\n\t\tAluno a2 = new Aluno("Luna", 6.1);\n\t\tAluno a3 = new Aluno("Gui", 8.1);\n\t\tAluno a4 = new Aluno("Gabi", 10);\n\t\tAluno a5 = new Aluno("Ana", 7.1);\n\t\tAluno a6 = new Aluno("Pedro", 9.1);\n\t\tAluno a7 = new Aluno("Gui", 8.1);\n\t\tAluno a8 = new Aluno("Maria", 10);\n\t\t\n\t\tList<Aluno> alunos = \n\t\t\t\tArrays.asList(a1, a2, a3, a4, a5, a6, a7, a8);\n\t\t\n\t\tSystem.out.println("distinct...");\n        // recuperar os valores distintos (precisa do equals e hash code)\n\t\talunos.stream().distinct().forEach(System.out::println);\n\t\t\n\t\tSystem.out.println("\\nSkip/Limit");\n\t\talunos.stream()\n\t\t\t.distinct()\n\t\t\t.skip(2) // pulo uma quantidade de itens\n\t\t\t.limit(2) // limita a quantidade de retorno\n\t\t\t.forEach(System.out::println);\n\t\t\n\t\tSystem.out.println("\\ntakeWhile");\n\t\talunos.stream()\n\t\t\t.distinct()\n\t\t\t.skip(2)\n\t\t\t.takeWhile(a -> a.nota >= 7) // retorna ate achar a condi\xe7\xe3o\n\t\t\t.forEach(System.out::println);\n\t}\n}\n'})})]})}function m(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}}}]);