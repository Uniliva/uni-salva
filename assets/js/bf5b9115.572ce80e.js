"use strict";(self.webpackChunkuni_docs=self.webpackChunkuni_docs||[]).push([[9062],{21847:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>t,contentTitle:()=>i,default:()=>m,frontMatter:()=>d,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"developer-notes/linguagens-de-programacao/protocolos-de-comunicacao/grpc/criando-metodos","title":"Criando m\xe9todos","description":"Tipo de m\xe9todos GRPC","source":"@site/docs/developer-notes/04-linguagens-de-programacao/02-protocolos-de-comunicacao/01-grpc/03-criando-metodos.md","sourceDirName":"developer-notes/04-linguagens-de-programacao/02-protocolos-de-comunicacao/01-grpc","slug":"/developer-notes/linguagens-de-programacao/protocolos-de-comunicacao/grpc/criando-metodos","permalink":"/docs/developer-notes/linguagens-de-programacao/protocolos-de-comunicacao/grpc/criando-metodos","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/developer-notes/04-linguagens-de-programacao/02-protocolos-de-comunicacao/01-grpc/03-criando-metodos.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Criando m\xe9todos"},"sidebar":"developerNotesSidebar","previous":{"title":"Criando mensagens","permalink":"/docs/developer-notes/linguagens-de-programacao/protocolos-de-comunicacao/grpc/criando-mensages"}}');var n=s(74848),r=s(28453);const d={title:"Criando m\xe9todos"},i=void 0,t={},c=[{value:"Tipo de m\xe9todos GRPC",id:"tipo-de-m\xe9todos-grpc",level:2},{value:"RPCs un\xe1rios",id:"rpcs-un\xe1rios",level:4},{value:"RPCs de streaming de servidor",id:"rpcs-de-streaming-de-servidor",level:4},{value:"RPCs de streaming de cliente",id:"rpcs-de-streaming-de-cliente",level:4},{value:"RPCs de streaming bidirecional",id:"rpcs-de-streaming-bidirecional",level:4}];function l(e){const o={blockquote:"blockquote",code:"code",h2:"h2",h4:"h4",hr:"hr",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h2,{id:"tipo-de-m\xe9todos-grpc",children:"Tipo de m\xe9todos GRPC"}),"\n",(0,n.jsx)(o.p,{children:"O gRPC permite definir quatro tipos de m\xe9todo de servi\xe7o:"}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.h4,{id:"rpcs-un\xe1rios",children:"RPCs un\xe1rios"}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"Em que o cliente envia uma \xfanica solicita\xe7\xe3o ao servidor e obt\xe9m uma \xfanica resposta, exatamente como uma chamada de fun\xe7\xe3o normal."}),"\n"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-java",children:"rpc SayHello(HelloRequest) returns (HelloResponse);\n"})}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.h4,{id:"rpcs-de-streaming-de-servidor",children:"RPCs de streaming de servidor"}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"Em que o cliente envia uma solicita\xe7\xe3o ao servidor e obt\xe9m um stream para ler uma sequ\xeancia de mensagens de volta. O cliente l\xea a partir do fluxo retornado at\xe9 que n\xe3o haja mais mensagens. O gRPC garante a ordem das mensagens em uma chamada RPC individual."}),"\n"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-java",children:"rpc LotsOfReplies(HelloRequest) returns (stream HelloResponse);\n"})}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.h4,{id:"rpcs-de-streaming-de-cliente",children:"RPCs de streaming de cliente"}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"Em que o cliente grava uma sequ\xeancia de mensagens e as envia ao servidor, novamente usando um fluxo fornecido. Depois que o cliente termina de escrever as mensagens, ele espera que o servidor as leia e retorne sua resposta. Mais uma vez, o gRPC garante a ordem das mensagens em uma chamada RPC individual."}),"\n"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-java",children:"rpc LotsOfGreetings(stream HelloRequest) returns (HelloResponse);\n"})}),"\n",(0,n.jsx)(o.hr,{}),"\n",(0,n.jsx)(o.h4,{id:"rpcs-de-streaming-bidirecional",children:"RPCs de streaming bidirecional"}),"\n",(0,n.jsxs)(o.blockquote,{children:["\n",(0,n.jsx)(o.p,{children:"Em que ambos os lados enviam uma sequ\xeancia de mensagens usando um fluxo de leitura e grava\xe7\xe3o. Os dois fluxos operam de forma independente, para que os clientes e servidores possam ler e escrever na ordem que quiserem: por exemplo, o servidor pode esperar para receber todas as mensagens do cliente antes de escrever suas respostas, ou pode alternativamente ler uma mensagem e depois escrever uma mensagem, ou alguma outra combina\xe7\xe3o de leituras e grava\xe7\xf5es. A ordem das mensagens em cada fluxo \xe9 preservada."}),"\n"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-java",children:"rpc BidiHello(stream HelloRequest) returns (stream HelloResponse);\n"})})]})}function m(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},28453:(e,o,s)=>{s.d(o,{R:()=>d,x:()=>i});var a=s(96540);const n={},r=a.createContext(n);function d(e){const o=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:d(e.components),a.createElement(r.Provider,{value:o},e.children)}}}]);